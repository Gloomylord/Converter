[{"/home/dima/Документы/currency_converter/src/pages/Portfolio/index.js":"1","/home/dima/Документы/currency_converter/src/store.js":"2","/home/dima/Документы/currency_converter/src/components/Converter/index.js":"3","/home/dima/Документы/currency_converter/src/pages/Portfolio/Coins/index.js":"4","/home/dima/Документы/currency_converter/src/pages/Portfolio/Diagram/index.js":"5","/home/dima/Документы/currency_converter/src/App.js":"6","/home/dima/Документы/currency_converter/src/pages/ConverterPage/index.js":"7","/home/dima/Документы/currency_converter/src/pages/ConverterPage/Chart.js":"8"},{"size":2727,"mtime":1606981973219,"results":"9","hashOfConfig":"10"},{"size":7086,"mtime":1607240722636,"results":"11","hashOfConfig":"10"},{"size":4115,"mtime":1606991536623,"results":"12","hashOfConfig":"10"},{"size":762,"mtime":1606919647523,"results":"13","hashOfConfig":"10"},{"size":1655,"mtime":1606921063121,"results":"14","hashOfConfig":"10"},{"size":2165,"mtime":1606893937608,"results":"15","hashOfConfig":"10"},{"size":1396,"mtime":1606991536627,"results":"16","hashOfConfig":"10"},{"size":2471,"mtime":1606991752324,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1mrg91e",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/dima/Документы/currency_converter/src/pages/Portfolio/index.js",["37"],"/home/dima/Документы/currency_converter/src/store.js",[],"/home/dima/Документы/currency_converter/src/components/Converter/index.js",["38","39","40"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport {Box, Button, makeStyles, TextField} from \"@material-ui/core\";\nimport SyncAltIcon from '@material-ui/icons/SyncAlt';\nimport CustomSelect from \"../../components/Select\";\nimport {observer} from \"mobx-react\";\n\nconst valuesArr = [\n    {\n        value: 'dollars',\n        label: 'US Dollar',\n        vsCurrency: 'usd'\n    },\n    {\n        value: 'ethereum',\n        label: 'Ethereum',\n        vsCurrency: 'eth'\n    },\n    {\n        value: 'bitcoin',\n        label: 'Bitcoin',\n        vsCurrency: 'btc'\n    }\n];\n\nconst useStyles = makeStyles((theme) => ({\n    row: {\n        display: 'flex',\n        'flex-direction': 'row'\n    },\n    column: {\n        display: 'flex',\n        'flex-direction': 'column',\n        'justify-content': 'space-between'\n    },\n    input: {\n        margin: theme.spacing(1)\n    },\n    icon: {\n        'align-self': 'center',\n        'font-size': '24px',\n        color: '#666',\n        margin: '0 20px',\n        transition: '.2s',\n        cursor: 'pointer',\n        '&:hover': {\n            color: '#111'\n        }\n    },\n    button: {\n        margin: '10px 8px',\n        'align-self': 'flex-end',\n    }\n}));\n\nfunction Converter(\n    {\n        convertFrom, setConvertFrom, convertTo, setConvertTo,\n        coefficient, maxFrom, buttonHandler,selectList\n    }\n) {\n    const [from, setFrom] = useState('1');\n    const [to, setTo] = useState('1');\n\n    const onToggle = useCallback(() => {\n        setConvertTo(convertFrom);\n        setConvertFrom(convertTo, convertFrom);\n    }, [convertFrom, convertTo]);\n\n    const onChangeTo = useCallback((e) => {\n        setTo(e.target.value);\n        setFrom(+(e.target.value / coefficient).toPrecision(5) + '');\n    }, [coefficient]);\n\n    const onClick = useCallback(() => {\n        buttonHandler(from, to);\n    }, [from, to]);\n\n    const onChangeFrom = useCallback((e) => {\n        setTo(+(e.target.value * coefficient).toPrecision(5) + '');\n        setFrom(e.target.value);\n    }, [coefficient]);\n\n    useEffect(() => {\n        setTo(+(from * coefficient).toPrecision(5) + '');\n    }, [coefficient, convertFrom, convertTo]);\n\n    const classes = useStyles();\n\n    return <>\n        <Box className={classes.row} style={{justifyContent: 'space-between'}}>\n            <Box className={classes.column}>\n                <CustomSelect\n                    value={convertFrom}\n                    setValue={setConvertFrom}\n                    values={valuesArr}\n                    label='from Currency'\n                    id='fromCurrency'\n                />\n                <TextField\n                    className={classes.input}\n                    value={from}\n                    onChange={onChangeFrom}\n                    id=\"fromCurrencyNumber\"\n                    type='number'\n                />\n            </Box>\n            <Box className={classes.row}>\n                <Box className={classes.icon}>\n                    <SyncAltIcon onClick={onToggle}/>\n                </Box>\n            </Box>\n            <Box className={classes.column}>\n                <CustomSelect\n                    value={convertTo}\n                    setValue={setConvertTo}\n                    values={selectList}\n                    id='toCurrency'\n                    label='to Currency'\n                />\n                <TextField\n                    className={classes.input}\n                    value={to}\n                    onChange={onChangeTo}\n                    id=\"toCurrencyNumber\"\n                    type='number'\n                />\n            </Box>\n        </Box>\n        {maxFrom !== null && maxFrom !== undefined &&\n        <>\n            <Button className={classes.button}\n                    variant=\"contained\"\n                    onClick={onClick}\n                    disabled={from > maxFrom}\n                    color=\"primary\">\n                Обменять\n            </Button>\n            {\n                from > maxFrom &&\n                <label>Столько нет</label>\n            }\n        </>\n        }\n    </>\n}\n\nexport default observer(Converter);\n",["41","42"],"/home/dima/Документы/currency_converter/src/pages/Portfolio/Coins/index.js",[],"/home/dima/Документы/currency_converter/src/pages/Portfolio/Diagram/index.js",["43"],"import React, {useMemo} from 'react';\nimport {observer} from \"mobx-react\";\nimport {\n    PieChart, Pie, Cell, Tooltip, Legend\n} from 'recharts';\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28'];\n\nconst RADIAN = Math.PI / 180;\n\nfunction Diagram({data}) {\n\n    const renderCustomizedLabel = useMemo(() => {\n        return ({\n                    cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n                }) => {\n            const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n            const x = cx + radius * Math.cos(-midAngle * RADIAN);\n            const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n            return (\n                <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n                    {(percent * 100).toFixed(0) > 0 ? `${(percent * 100).toFixed(0)}%`:''}\n                </text>\n            );\n        };\n    }, [data]);\n\n    return (\n        <PieChart width={400} height={300}>\n            <Pie\n                data={data}\n                cx={200}\n                cy={150}\n                labelLine={false}\n                label={renderCustomizedLabel}\n                outerRadius={100}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n            >\n                {\n                    data.map((entry, index) =>\n                        <Cell\n                            key={`cell-${index}`}\n                            fill={COLORS[index % COLORS.length]}\n                        />)\n                }\n            </Pie>\n            <Tooltip/>\n            <Legend/>\n        </PieChart>\n    );\n}\n\nexport default observer(Diagram);\n","/home/dima/Документы/currency_converter/src/App.js",[],"/home/dima/Документы/currency_converter/src/pages/ConverterPage/index.js",["44"],"/home/dima/Документы/currency_converter/src/pages/ConverterPage/Chart.js",["45","46"],{"ruleId":"47","severity":1,"message":"48","line":48,"column":8,"nodeType":"49","endLine":48,"endColumn":10,"suggestions":"50"},{"ruleId":"47","severity":1,"message":"51","line":67,"column":8,"nodeType":"49","endLine":67,"endColumn":32,"suggestions":"52"},{"ruleId":"47","severity":1,"message":"53","line":76,"column":8,"nodeType":"49","endLine":76,"endColumn":18,"suggestions":"54"},{"ruleId":"47","severity":1,"message":"55","line":85,"column":8,"nodeType":"49","endLine":85,"endColumn":45,"suggestions":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"47","severity":1,"message":"61","line":27,"column":8,"nodeType":"49","endLine":27,"endColumn":14,"suggestions":"62"},{"ruleId":"47","severity":1,"message":"48","line":41,"column":8,"nodeType":"49","endLine":41,"endColumn":24,"suggestions":"63"},{"ruleId":"47","severity":1,"message":"48","line":29,"column":8,"nodeType":"49","endLine":29,"endColumn":10,"suggestions":"64"},{"ruleId":"47","severity":1,"message":"65","line":48,"column":8,"nodeType":"49","endLine":48,"endColumn":10,"suggestions":"66"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.","ArrayExpression",["67"],"React Hook useCallback has missing dependencies: 'setConvertFrom' and 'setConvertTo'. Either include them or remove the dependency array. If 'setConvertTo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["68"],"React Hook useCallback has a missing dependency: 'buttonHandler'. Either include it or remove the dependency array. If 'buttonHandler' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["69"],"React Hook useEffect has a missing dependency: 'from'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTo' needs the current value of 'from'.",["70"],"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"React Hook useMemo has an unnecessary dependency: 'data'. Either exclude it or remove the dependency array.",["73"],["74"],["75"],"React Hook useMemo has a missing dependency: 'store.valuesArr'. Either include it or remove the dependency array.",["76"],{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"77","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [store]",{"range":"92","text":"93"},"Update the dependencies array to be: [convertFrom, convertTo, setConvertFrom, setConvertTo]",{"range":"94","text":"95"},"Update the dependencies array to be: [buttonHandler, from, to]",{"range":"96","text":"97"},"Update the dependencies array to be: [coefficient, convertFrom, convertTo, from]",{"range":"98","text":"99"},"Update the dependencies array to be: []",{"range":"100","text":"101"},"Update the dependencies array to be: [store, store.coinFrom]",{"range":"102","text":"103"},{"range":"104","text":"93"},"Update the dependencies array to be: [store.valuesArr]",{"range":"105","text":"106"},[1037,1039],"[store]",[1568,1592],"[convertFrom, convertTo, setConvertFrom, setConvertTo]",[1845,1855],"[buttonHandler, from, to]",[2117,2154],"[coefficient, convertFrom, convertTo, from]",[918,924],"[]",[922,938],"[store, store.coinFrom]",[800,802],[1376,1378],"[store.valuesArr]"]